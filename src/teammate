#!/bin/bash

RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
NO_COLOR='\033[0m'

err(){
  echo ""
  echo -e "❌ ${RED}Error: $1${NO_COLOR}"
  echo ""
  exit 1
}

step(){
  echo ""
  echo -e "✅ ${GREEN}Step: $1...${NO_COLOR}"
  echo ""
}

warn(){
  echo -e "⚠️  ${YELLOW}Warning: $1${NO_COLOR}"
  echo ""
}

# Help
if [ "$1" = "--help" ] || [ "$1" = "-h" ]
then
  echo ""
  echo "Team Mate Tool"
  echo ""
  echo "You can use this script to quickly open and share pull request(s) for your project with your team."
  echo "By default the command does a normal push to the server creating a pull request on 'master' branch using the last commit message as pull request tile and adding a label with the name of the branch."
  echo "The default values can be overriden with a config file in the current folder."
  echo "If in the configuration file the notification formatter and hook are defined, a post request is done to share the pull request info with the team."
  echo ""
  echo "Options:"
  echo " -f              : Force push to the server."
  echo ""
  echo " -t \"new title\"  : Set the title used for the pull request and the notification."
  echo ""
  echo " -b \"brA( brB)\"  : Set the destination branch(es). It uses space as separator."
  echo ""
  echo " -u              : Skip the pull request(s) creation and fetch the first pull request url to send in the notification."
  echo ""
  echo " -s              : Silence the notification."
  echo ""
  echo " -w              : Add a 'WIP' label to the pull request(s) created"
  echo ""
  echo "Note: This script is depending on 'hub', 'git' and 'curl'."
  echo ""
  exit 1
fi

## Version
if [ "$1" = "--version" ] || [ "$1" = "-v" ]
then
  echo "teammate v1.1"
  exit 1
fi

# Check dependencies
if ! [ -x "$(command -v hub)" ]; then
  err 'Error: hub is not installed.'
fi
if ! [ -x "$(command -v git)" ]; then
  err 'Error: git is not installed.'
fi
if ! [ -x "$(command -v curl)" ]; then
  err 'Error: curl is not installed.'
fi

# Defaults
PR_TITLE=$(git log --oneline -n 1 | sed 's;^[0-9a-zA-Z]*[\ ]*;;')
PR_BRANCHES="master"

PUSH_FORCE=0
UPDATE=0
WIP=0
NOTIFY=0

# Load config file
if [ -e ./.team ]
then
    step "Found config file"
    . ./.team

    if [ -n "$DEFAULT_BRANCH" ]
    then
      PR_BRANCHES=$DEFAULT_BRANCH
    fi

    if [ -n "$NOTIFICATION_HOOK" ] && [ "$(type -t FORMATTER)" == 'function' ]
    then
      NOTIFY=1
    fi
fi

# User data
AUTHOR=$(git log -n 1 | grep Author | sed 's/Author:\ //' | sed 's/\<.*//')
GIT_EMAIL=$(git log -n 1 | grep Author | sed 's/[^\<]*\<//' | sed 's/\>.*//')

# Inputs
while getopts t:b:fuws option; do
  case "${option}" in
    t) PR_TITLE=${OPTARG};;
    b) PR_BRANCHES=${OPTARG};;
    f) PUSH_FORCE=1;;
    u) UPDATE=1;;
    w) WIP=1;;
    s) NOTIFY=0;;
  esac
done

# Pushing the branch
if [ "$PUSH_FORCE" = "0" ]
then
  if ! git push -u
  then
    err "Cannot push the branch! Do you need to push force?"
  fi
else
  warn "Force pushing the branch"
  if ! git push -f
  then
    err "Cannot push the branch!"
  fi
fi

step "Branch successfully pushed"

PR_URL=""
MESSAGE=""

if [ "$UPDATE" = "1" ]
then
  # Update pr(s)
  PR_URL=$(hub pr show -u)
  if [ "$?" = "1" ]; then err "Could not find any existing pull request. Should you try without the -u option?"; fi
  MESSAGE="I updated my pull request. Can you review again?"
else
  # Opening pr(s)
  for branch in $PR_BRANCHES
  do
    if [ "$WIP" = "1" ]
    then
      PR_URL=$(hub pull-request -m "$PR_TITLE" -b $branch -l $branch,WIP)
      if [ "$?" = "1" ]; then err "Could not open a pull request to $branch. Did you forget to use the -u or -b option?"; fi
      MESSAGE="I opened a WIP pull request. Can you give me an early feedback?"
    else
      PR_URL=$(hub pull-request -m "$PR_TITLE" -b $branch -l $branch)
      if [ "$?" = "1" ]; then err "Could not open a pull request to $branch. Did you forget to use the -u or -b option?"; fi
      MESSAGE="Can you review my new pull request?"
    fi
  done
fi

step "Pull request(s) correctly syncronized"

# Send Notification
if [ "$NOTIFY" = "1" ]
then
  FORMATTER "$AUTHOR" "$MESSAGE" "$PR_URL" "$PR_TITLE"
  curl -X POST \
    $NOTIFICATION_HOOK \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    -d "$NOTIFICATION"

  step "Slack notification sent!"
fi

exit 1
